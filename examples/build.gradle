plugins {
    id "java"
}

// Change this to match the main class of any example you want to deploy
def ROBOT_MAIN_CLASS = "io.github.frc5024.lib5k.examples.autonomous_path_following.Main"


// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(5024)
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

dependencies {

    // All of lib5k
    implementation project(":lib5k-api")

    // HALSIM
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
}

sourceSets {
  main {
    java {
      srcDir 'src/main/java'
    }
  }

  test {
    java {
      srcDir 'src/test/java'
    }
  }
}


// Trick root build into thinking this has a jar
task fatJar{

}

jar {
    // Require other libraries
    dependsOn ":lib5k-api:assemble"

    // Bundle the JAR
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)

}
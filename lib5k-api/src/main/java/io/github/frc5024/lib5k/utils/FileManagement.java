package io.github.frc5024.lib5k.utils;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj.RobotBase;

/**
 * This class handles session-based file management for the robot. Every time
 * the RoboRIO boots, a new "session" folder is created with the current
 * timestamp. All logs and files generated by software are stored here
 * automatically.
 * 
 * This adds a bit of abstraction, where robot software doesn't have to worry
 * about filepaths and timestamps, and will be automatically given a work
 * directory on boot.
 */
public class FileManagement {

    private static String sessionPath = null;

    /**
     * Get the filepath to the session directory
     * 
     * @return Session directory filepath
     */
    public static String getSessionDirectoryPath() {

        // Handle setting up the session
        if (sessionPath == null) {

            // Create the base path
            StringBuilder basePath = new StringBuilder();

            // Add the USB base path
            basePath.append(getUSBStickBasePath());

            // Determine if this is simulation or not
            if (RobotBase.isSimulation()) {
                basePath.append("/_simulation_sessions");
            } else {
                basePath.append("/sessions");
            }

            // Append the timestamp
            basePath.append("/" + System.currentTimeMillis());

            // Create all missing directories
            try {
                Files.createDirectories(Paths.get(basePath.toString()));
            } catch (IOException e) {
                // Do nothing. Callers of this function will handle missing paths
            }

            // Set the session path
            sessionPath = basePath.toString();

        }

        // Return the session path
        return sessionPath;

    }

    /**
     * Get a file object for the session directory
     * 
     * @return Session directory File object
     */
    public static File getSessionDirectory() {
        return new File(getSessionDirectoryPath());
    }

    /**
     * Create a FileWriter for a file inside the current session
     * 
     * @param filename File name
     * @return Session FileWriter
     * @throws IOException Thrown when the specified file cannot be opened
     */
    public static FileWriter createFileWriter(String filename) throws IOException {
        return new FileWriter(getSessionDirectoryPath() + "/" + filename);
    }

    /**
     * Create a FileReader for a file inside the current session
     * 
     * @param filename File name
     * @return Session FileReader
     * @throws FileNotFoundException Thrown if the file does not exist
     */
    public static FileReader createFileReader(String filename) throws FileNotFoundException {
        return new FileReader(getSessionDirectoryPath() + "/" + filename);
    }

    /**
     * Get the base path to the attached USB stick
     * 
     * @return USB base path
     */
    public static String getUSBStickBasePath() {
        // Determine if this is simulation or not
        if (RobotBase.isSimulation()) {
            return Filesystem.getOperatingDirectory().getAbsolutePath();
        } else {
            return "/media/sda1";
        }
    }

    /**
     * Get if the USB stick is plugged in
     * 
     * @return Is USB stick plugged in?
     */
    public static boolean isUSBAttached() {
        return Files.exists(Path.of(getUSBStickBasePath()));
    }
}